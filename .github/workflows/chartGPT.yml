#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build chartGPT-immortalwrt-mt798x-RAX3000M

on:
  workflow_dispatch:
#  push:
#    branches:
#      - main

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x.git
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: configs/rax3000m.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code 🛠️
      uses: actions/checkout@main
      # 该步骤用于从GitHub仓库中检出代码

    - name: Cache OpenWrt downloads 📦
      uses: actions/cache@v3
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-openwrt-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-
      id: cache-dl
      # 该步骤缓存 OpenWrt 下载的依赖包，避免重复下载

    - name: Cache OpenWrt build directory 🛠️
      uses: actions/cache@v3
      with:
        path: |
          openwrt/build_dir
          openwrt/staging_dir
          openwrt/scripts  # 确保缓存 `scripts` 目录
        key: ${{ runner.os }}-openwrt-build-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-build-
      id: cache-build
      # 恢复构建目录和脚本缓存

    - name: Initialization environment 🖥️
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo apt-get autoremove --purge -y && sudo apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir
      # 该步骤用于初始化构建环境并安装所需的依赖包

    - name: Clone source code 🧑‍💻
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
      # 该步骤用于克隆源码并设置工作目录

    - name: Load custom feeds 📦
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
      # 该步骤加载自定义的软件源配置文件并执行初始化脚本

    - name: Update feeds 🔄
      run: cd openwrt && ./scripts/feeds update -a
      # 该步骤更新软件包源

    - name: Install feeds 🛠️
      run: cd openwrt && ./scripts/feeds install -a
      # 该步骤安装所需的软件包

    - name: Load custom configuration 🧑‍🏫
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
      # 该步骤加载自定义的配置文件和脚本

    - name: Download package 📥
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
      # 该步骤下载所需的包

    - name: Compile the firmware ⚙️
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
      # 该步骤用于编译固件，并生成最终的固件文件

    - name: Cache build output 🗂️
      uses: actions/cache@v3
      with:
        path: |
          openwrt/dl
          openwrt/build_dir
          openwrt/staging_dir
          openwrt/scripts
        key: ${{ runner.os }}-openwrt-${{ github.run_id }}
      id: cache-store
      # 存储新的缓存，包括下载目录和构建目录

    - name: Check space usage 💾
      if: (!cancelled())
      run: df -hT
      # 该步骤用于检查磁盘空间使用情况

    - name: Upload bin directory 📤
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: "OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}"
        path: openwrt/bin
      # 该步骤上传编译生成的二进制文件

    - name: Organize files 🗂️
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
      # 该步骤整理生成的固件文件

    - name: Generate firmware filename 📝
      id: generate_filename
      run: |
        # 使用固定的版本号
        VERSION="immortalwrt-21.02"
        # 获取当前日期并格式化为 YYYYMMDD
        TIMESTAMP=$(date '+%Y%m%d')
        # 生成完整的文件名
        FILENAME="RAX3000M_mediatek_mt7981_${VERSION}-${{ github.run_id }}-${TIMESTAMP}"
        echo "Generated firmware filename: $FILENAME"
        echo "FILENAME=$FILENAME" >> $GITHUB_ENV
        # 该步骤生成固件文件名，使用固定的版本号

    - name: Upload firmware directory 📦
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILENAME }}
        path: ${{ env.FIRMWARE }}
      # 该步骤上传生成的固件文件，文件名由前一步动态生成

    - name: Delete workflow runs 🗑️
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
      # 该步骤删除历史的工作流记录，保持工作流整洁
