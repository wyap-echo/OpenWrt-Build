#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build immortalwrt-mt798x-RAX3000M (Optimized)

on:
  workflow_dispatch:
#  push:
#    branches:
#      - main

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x.git
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: configs/rax3000m.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    # 锁定运行环境版本，增强稳定性
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout 🛎️
      # 锁定 Action 版本
      uses: actions/checkout@v4

    - name: Initialization environment 🖥️
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        # ===============================================================
        # 已更新：执行仓库内的本地脚本，而不是从网络下载
        chmod +x scripts/init_env.sh
        sudo bash scripts/init_env.sh
        # ===============================================================
        sudo apt-get autoremove --purge -y && sudo apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir

    - name: Clone source code 🧑‍💻
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    # 新增缓存步骤，大幅提升后续构建速度
    - name: Cache build dependencies  caching ⚡
      uses: actions/cache@v4
      with:
        path: |
          /workdir/openwrt/staging_dir
          /workdir/openwrt/dl
        # 'key' 的设计很重要，当这些文件变化时，缓存会失效并重新生成
        key: ${{ runner.os }}-openwrt-${{ env.REPO_BRANCH }}-${{ hashFiles('**/rax3000m.config', '**/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-${{ env.REPO_BRANCH }}-

    - name: Load custom feeds 📦
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update and Install feeds 🔄
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom configuration 🧑‍🏫
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package 📥
      id: package
      run: |
        cd openwrt
        make defconfig
        # 使用 $(nproc) 自动获取核心数
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware ⚙️
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME

    - name: Check space usage 💾
      if: success() || failure()
      run: df -hT

    - name: Organize files and generate filename 🗂️
      id: organize
      # 简化 if 条件判断
      if: success() && env.UPLOAD_FIRMWARE == 'true'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        # 将文件名生成逻辑合并到此步骤
        VERSION="immortalwrt-21.02"
        TIMESTAMP=$(date '+%Y%m%d')
        FILENAME="RAX3000M_mediatek_mt7981_${VERSION}-${{ github.run_id }}-${TIMESTAMP}"
        
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        echo "FIRMWARE_NAME=$FILENAME" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to Artifacts 📦
      # 锁定 Action 版本
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success'
      with:
        name: ${{ env.FIRMWARE_NAME }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Delete workflow runs 🗑️
      # 锁定 Action 版本
      uses: GitRML/delete-workflow-runs@v1
      with:
        retain_days: 1
        keep_minimum_runs: 3
