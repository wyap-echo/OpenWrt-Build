name: Test OpenWrt Cache Restore

on:
  workflow_dispatch:

jobs:
  test-cache:
    runs-on: ubuntu-latest
    steps:
    
    # 步骤 1: 检出代码
    - name: Checkout code 🛠️
      uses: actions/checkout@v2
      # 检出代码，确保有 OpenWrt 源代码
    
    # 步骤 2: 缓存 OpenWrt 的下载目录
    - name: Cache OpenWrt downloads 📦
      uses: actions/cache@v3
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-openwrt-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-
      id: cache-dl

    # 步骤 3: 缓存 OpenWrt 构建目录
    - name: Cache OpenWrt build directory 🛠️
      uses: actions/cache@v3
      with:
        path: |
          openwrt/build_dir
          openwrt/staging_dir
          openwrt/scripts  # 确保缓存 scripts 目录
        key: ${{ runner.os }}-openwrt-build-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-build-
      id: cache-build

    # 步骤 4: 确认缓存是否命中
    - name: Check if cache hit 💡
      run: |
        echo "Cache Hit: ${{ steps.cache-dl.outputs.cache-hit }}"
        echo "Cache Hit: ${{ steps.cache-build.outputs.cache-hit }}"

    # 步骤 5: 验证是否恢复了 feeds 脚本
    - name: Verify that ./scripts/feeds exists 📂
      run: |
        ls -l openwrt/scripts
        # 输出 openwrt/scripts 目录，确保 feeds 脚本存在
    
    # 步骤 6: 确保仓库克隆并运行 make defconfig
    - name: Load custom configuration 🧑‍🏫
      run: |
        cd openwrt
        make defconfig
        # 确保配置文件被正确加载
    
    # 步骤 7: 运行 feeds 更新命令
    - name: Update feeds 🔄
      run: |
        cd openwrt
        ./scripts/feeds update -a
        # 确保 feeds 更新命令成功执行

    # 步骤 8: 输出调试信息，确保正确生成文件名
    - name: Generate firmware filename 📝
      id: generate_filename
      run: |
        VERSION="immortalwrt-21.02"
        TIMESTAMP=$(date '+%Y%m%d')
        FILENAME="RAX3000M_mediatek_mt7981_${VERSION}-${{ github.run_id }}-${TIMESTAMP}"
        echo "Generated firmware filename: $FILENAME"
        echo "FILENAME=$FILENAME" >> $GITHUB_ENV
      # 生成文件名并输出调试信息

    # 步骤 9: 输出生成的文件名
    - name: Output the generated firmware filename
      run: |
        echo "The generated firmware filename is: ${{ env.FILENAME }}"
      # 输出文件名，检查是否正确生成
