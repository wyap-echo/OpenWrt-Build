# 🛠️ RAX3000M 固件编译工作流 (最终优化版)
# ✅ GitHub Actions 官方标准 | 安全合规 | 高效编译

name: Build RAX3000M Firmware

on:
  workflow_dispatch:    # 🎯 手动触发
  push:
    branches: [main]

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x.git
  REPO_BRANCH: openwrt-21.02
  TZ: Asia/Shanghai
  CONFIG_FILE: configs/rax3000m.config
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  FIRMWARE_PREFIX: ImmortalWrt-RAX3000M

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
    # ======================
    # 🧹 环境初始化 (安全增强)
    # ======================
    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        
        # 🔒 脚本完整性校验
        curl -sSL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh -o script.sh
        echo "EXPECTED_HASH=your_sha256_here" >> hash_check
        sha256sum -c hash_check || exit 1
        sudo bash script.sh
        
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    # ======================
    # 📥 源码获取与缓存配置
    # ======================
    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone --depth=1 --filter=blob:none $REPO_URL -b $REPO_BRANCH openwrt || {
          echo "::error::Git clone failed!"
          exit 1
        }
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Configure cache
      uses: actions/cache@v4
      with:
        path: |
          /workdir/openwrt/dl
          /workdir/ccache
        key: ${{ runner.os }}-${{ hashFiles('configs/rax3000m.config') }}-v6

    # ======================
    # ⚙️ 配置与编译
    # ======================
    - name: Apply configurations
      run: |
        [ -e $FEEDS_CONF ] && cp $FEEDS_CONF openwrt/feeds.conf.default || echo "::notice::Using default feeds"
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config || {
          echo "::error::Config file missing!"
          exit 1
        }

        for script in $DIY_P1_SH $DIY_P2_SH; do
          if [ -f "$script" ]; then
            chmod +x "$script"
            cd openwrt
            $GITHUB_WORKSPACE/$script || exit 1
            cd ..
          fi
        done

    - name: Download packages
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc) || {
          echo "::error::Package download failed!"
          exit 1
        }
        find dl -size -1024c -delete

    - name: Compile firmware
      timeout-minutes: 120
      run: |
        cd openwrt
        make -j$(nproc) || make -j2 || make -j1 V=s || {
          echo "::error::Compilation failed!"
          exit 1
        }

        if [ ! -f bin/targets/*/*/*.bin ]; then
          echo "::error::No firmware generated!"
          exit 1
        fi

    # ======================
    # 📤 输出与制品上传
    # ======================
    - name: Rename firmware
      id: rename
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        BUILD_DATE=$(date +"%Y%m%d-%H%M")
        for file in *.bin; do
          new_name="${file/-squashfs-/-$BUILD_DATE-}"
          mv "$file" "$FIRMWARE_PREFIX-$new_name"
        done
        echo "FIRMWARE_DIR=$PWD" >> $GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.FIRMWARE_PREFIX }}-$(date +"%Y%m%d-%H%M")
        path: ${{ env.FIRMWARE_DIR }}/*.bin
