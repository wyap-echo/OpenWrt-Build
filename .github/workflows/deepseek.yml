# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
# Fixed by DeepSeek-R1

name: Build deepseek-immortalwrt-mt798x-RAX3000M

on:
  workflow_dispatch:
#  push:
#    branches:
#      - main

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x.git
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: configs/rax3000m.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code üõ†Ô∏è
      uses: actions/checkout@v4

    - name: Initialization environment üñ•Ô∏è
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo apt-get autoremove --purge -y && sudo apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir
        
    # ÂÖ≥ÈîÆ‰øÆÂ§ç1ÔºöË∞ÉÊï¥Ê≠•È™§È°∫Â∫èÔºåÂÖàÂÖãÈöÜ‰ª£Á†ÅÂÜçÁºìÂ≠ò
    - name: Clone source code üßëüíª
      id: clone_code
      working-directory: /workdir
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        echo "CLONE_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Cache OpenWrt downloads üì¶
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt/dl
        key: ${{ runner.os }}-dl-${{ env.CLONE_TIME }}-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-dl-
      id: cache-dl

    # ÂÖ≥ÈîÆ‰øÆÂ§ç2ÔºöÁßªÈô§ÂØπscriptsÁõÆÂΩïÁöÑÁºìÂ≠ò
    - name: Cache build artifacts üõ†Ô∏è
      uses: actions/cache@v3
      with:
        path: |
          /workdir/openwrt/build_dir
          /workdir/openwrt/staging_dir
          /workdir/openwrt/tmp
        key: ${{ runner.os }}-build-${{ env.CLONE_TIME }}-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-build-
      id: cache-build

    # Êñ∞Â¢ûÊ†°È™åÊ≠•È™§
    - name: Validate source tree üîç
      run: |
        if [ ! -f "/workdir/openwrt/scripts/feeds" ]; then
          echo "::error::Missing critical file: scripts/feeds"
          exit 1
        fi
        if [ ! -d "/workdir/openwrt/package" ]; then
          echo "::error::Source tree incomplete"
          exit 1
        fi

    - name: Load custom feeds üì¶
      run: |
        if [ -e "$FEEDS_CONF" ]; then
          mv "$FEEDS_CONF" /workdir/openwrt/feeds.conf.default
          echo "Custom feeds.conf applied"
        else
          echo "Using default feeds.conf"
        fi
        
        if [ -x "$DIY_P1_SH" ]; then
          cd /workdir/openwrt
          "$GITHUB_WORKSPACE/$DIY_P1_SH"
        else
          echo "Skipping DIY_P1_SH: $DIY_P1_SH not found"
        fi

    - name: Update feeds üîÑ
      run: |
        cd /workdir/openwrt
        ./scripts/feeds update -a
        echo "Feed update timestamp: $(date +%s)" >> feed_version.log

    - name: Install feeds üõ†Ô∏è
      run: |
        cd /workdir/openwrt
        ./scripts/feeds install -a
        [ -f "$CONFIG_FILE" ] && cp "$CONFIG_FILE" .config

    - name: Load custom configuration üßëüè´
      run: |
        if [ -d "files" ]; then
          mv files /workdir/openwrt/files
          echo "Custom files directory applied"
        fi
        
        if [ -x "$DIY_P2_SH" ]; then
          cd /workdir/openwrt
          "$GITHUB_WORKSPACE/$DIY_P2_SH"
        else
          echo "Skipping DIY_P2_SH: $DIY_P2_SH not found"
        fi

    - name: Download package üì•
      id: package
      run: |
        cd /workdir/openwrt
        make defconfig
        make download -j$(nproc)
        # Ê∏ÖÁêÜÊó†ÊïàÁöÑÂ∞èÊñá‰ª∂
        find dl -size -1024c -delete

    - name: Compile the firmware ‚öôÔ∏è
      id: compile
      run: |
        cd /workdir/openwrt
        echo "Using $(nproc) threads"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME

    - name: Cache build output üóÇÔ∏è
      uses: actions/cache@v3
      with:
        path: |
          /workdir/openwrt/dl
          /workdir/openwrt/build_dir
          /workdir/openwrt/staging_dir
        key: ${{ runner.os }}-output-${{ github.run_id }}
      id: cache-store

    - name: Check space usage üíæ
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory üì§
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: "OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ github.run_id }}"
        path: /workdir/openwrt/bin
        retention-days: 3

    - name: Organize files üóÇÔ∏è
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd /workdir/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE_DIR=$(pwd)" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Generate firmware filename üìù
      id: generate_filename
      run: |
        COMMIT_SHA=$(git -C /workdir/openwrt rev-parse --short HEAD)
        TIMESTAMP=$(date '+%Y%m%d-%H%M')
        FILENAME="RAX3000M_immortalwrt-21.02_${COMMIT_SHA}_${TIMESTAMP}"
        echo "FILENAME=${FILENAME}" >> $GITHUB_ENV
        echo "::notice::Generated filename: ${FILENAME}"

    - name: Upload firmware üì¶
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILENAME }}
        path: ${{ env.FIRMWARE_DIR }}
        compression-level: 9
        retention-days: 7

    - name: Delete workflow runs üóëÔ∏è
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
        token: ${{ secrets.GITHUB_TOKEN }}
